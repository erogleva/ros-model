/**
 * generated by Xtext 2.12.0
 */
package de.fraunhofer.ipa.ros.xtext.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import ros.Node;
import ros.Publisher;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class RosGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Node> _filter = Iterables.<Node>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Node.class);
    for (final Node node : _filter) {
      String _name = node.getName();
      String _plus = (_name + ".cpp");
      fsa.generateFile(_plus, this.compile(node));
    }
  }
  
  public CharSequence compile(final Node node) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Publisher> _publisher = node.getPublisher();
      for(final Publisher pub : _publisher) {
        CharSequence _compile = this.compile(pub);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Publisher pub) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#include \"ros/ros.h\"");
    _builder.newLine();
    _builder.append("#include \"std_msgs/String.h\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("int main(int argc, char **argv)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append(" ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("ros::init(argc, argv, \"");
    String _name = pub.getName();
    _builder.append(_name, "  ");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("ros::NodeHandle n;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("ros::Publisher ");
    String _name_1 = pub.getName();
    _builder.append(_name_1, "  ");
    _builder.append("_pub = n.advertise<std_msgs::String>(\"");
    String _name_2 = pub.getName();
    _builder.append(_name_2, "  ");
    _builder.append("\", 1000);");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("ros::Rate loop_rate(10);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("int count = 0;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("while (ros::ok())");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("std_msgs::String msg;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("std::stringstream ss;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ss << \"hello world \" << count;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("msg.data = ss.str();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ROS_INFO(\"%s\", msg.data.c_str());");
    _builder.newLine();
    _builder.append("    ");
    String _name_3 = pub.getName();
    _builder.append(_name_3, "    ");
    _builder.append("_pub.publish(msg);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("ros::spinOnce();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("loop_rate.sleep();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("++count;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("return 0;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
