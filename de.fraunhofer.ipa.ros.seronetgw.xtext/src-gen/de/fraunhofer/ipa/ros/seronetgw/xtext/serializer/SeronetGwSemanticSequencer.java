/*
 * generated by Xtext 2.12.0
 */
package de.fraunhofer.ipa.ros.seronetgw.xtext.serializer;

import com.google.inject.Inject;
import de.fraunhofer.ipa.ros.seronetgw.rosgw.RosGateway;
import de.fraunhofer.ipa.ros.seronetgw.rosgw.RosgwPackage;
import de.fraunhofer.ipa.ros.seronetgw.xtext.services.SeronetGwGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import ros.GlobalNamespace;
import ros.MessageDefinition;
import ros.PrivateNamespace;
import ros.Publisher;
import ros.RelativeNamespace;
import ros.RosPackage;
import ros.ServiceClient;
import ros.ServiceServer;
import ros.ServiceSpec;
import ros.Subscriber;
import ros.TopicSpec;

@SuppressWarnings("all")
public class SeronetGwSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SeronetGwGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RosPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RosPackage.GLOBAL_NAMESPACE:
				sequence_GlobalNamespace(context, (GlobalNamespace) semanticObject); 
				return; 
			case RosPackage.MESSAGE_DEFINITION:
				sequence_MessageDefinition(context, (MessageDefinition) semanticObject); 
				return; 
			case RosPackage.PRIVATE_NAMESPACE:
				sequence_PrivateNamespace(context, (PrivateNamespace) semanticObject); 
				return; 
			case RosPackage.PUBLISHER:
				sequence_Publisher(context, (Publisher) semanticObject); 
				return; 
			case RosPackage.RELATIVE_NAMESPACE:
				sequence_RelativeNamespace_Impl(context, (RelativeNamespace) semanticObject); 
				return; 
			case RosPackage.SERVICE_CLIENT:
				sequence_ServiceClient(context, (ServiceClient) semanticObject); 
				return; 
			case RosPackage.SERVICE_SERVER:
				sequence_ServiceServer(context, (ServiceServer) semanticObject); 
				return; 
			case RosPackage.SERVICE_SPEC:
				sequence_ServiceSpec(context, (ServiceSpec) semanticObject); 
				return; 
			case RosPackage.SUBSCRIBER:
				sequence_Subscriber(context, (Subscriber) semanticObject); 
				return; 
			case RosPackage.TOPIC_SPEC:
				sequence_TopicSpec(context, (TopicSpec) semanticObject); 
				return; 
			}
		else if (epackage == RosgwPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RosgwPackage.ROS_GATEWAY:
				sequence_RosGateway(context, (RosGateway) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Namespace returns GlobalNamespace
	 *     GlobalNamespace returns GlobalNamespace
	 *
	 * Constraint:
	 *     (parts+=GraphName parts+=GraphName*)?
	 */
	protected void sequence_GlobalNamespace(ISerializationContext context, GlobalNamespace semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MessageDefinition returns MessageDefinition
	 *
	 * Constraint:
	 *     {MessageDefinition}
	 */
	protected void sequence_MessageDefinition(ISerializationContext context, MessageDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Namespace returns PrivateNamespace
	 *     PrivateNamespace returns PrivateNamespace
	 *
	 * Constraint:
	 *     (parts+=GraphName parts+=GraphName*)?
	 */
	protected void sequence_PrivateNamespace(ISerializationContext context, PrivateNamespace semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Publisher returns Publisher
	 *
	 * Constraint:
	 *     (name=GraphName message=[TopicSpec|EString] namespace=Namespace?)
	 */
	protected void sequence_Publisher(ISerializationContext context, Publisher semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Namespace returns RelativeNamespace
	 *     RelativeNamespace_Impl returns RelativeNamespace
	 *
	 * Constraint:
	 *     (parts+=GraphName parts+=GraphName*)?
	 */
	protected void sequence_RelativeNamespace_Impl(ISerializationContext context, RelativeNamespace semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RosGateway returns RosGateway
	 *
	 * Constraint:
	 *     (
	 *         (RosTopicPublisher+=[Publisher|EString] RosTopicPublisher+=[Publisher|EString]*)? 
	 *         (RosTopicSubscriber+=[Subscriber|EString] RosTopicSubscriber+=[Subscriber|EString]*)? 
	 *         (RosServiceServer+=[ServiceServer|EString] RosServiceServer+=[ServiceServer|EString]*)? 
	 *         (RosServiceClient+=[ServiceClient|EString] RosServiceClient+=[ServiceClient|EString]*)?
	 *     )
	 */
	protected void sequence_RosGateway(ISerializationContext context, RosGateway semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ServiceClient returns ServiceClient
	 *
	 * Constraint:
	 *     (name=GraphName service=[ServiceSpec|EString] namespace=Namespace?)
	 */
	protected void sequence_ServiceClient(ISerializationContext context, ServiceClient semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ServiceServer returns ServiceServer
	 *
	 * Constraint:
	 *     (name=GraphName service=[ServiceSpec|EString] namespace=Namespace?)
	 */
	protected void sequence_ServiceServer(ISerializationContext context, ServiceServer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ServiceSpec returns ServiceSpec
	 *
	 * Constraint:
	 *     (name=EString request=MessageDefinition? response=MessageDefinition?)
	 */
	protected void sequence_ServiceSpec(ISerializationContext context, ServiceSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Subscriber returns Subscriber
	 *
	 * Constraint:
	 *     (name=GraphName message=[TopicSpec|EString] namespace=Namespace?)
	 */
	protected void sequence_Subscriber(ISerializationContext context, Subscriber semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TopicSpec returns TopicSpec
	 *
	 * Constraint:
	 *     (name=EString message=MessageDefinition?)
	 */
	protected void sequence_TopicSpec(ISerializationContext context, TopicSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
