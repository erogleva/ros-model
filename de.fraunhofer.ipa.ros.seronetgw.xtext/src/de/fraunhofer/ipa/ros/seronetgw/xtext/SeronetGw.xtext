// automatically generated by Xtext
grammar de.fraunhofer.ipa.ros.seronetgw.xtext.SeronetGw with org.eclipse.xtext.common.Terminals

import "http://www.example.org/rosgw" 
import "http://www.example.org/ros" as ros
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

RosGateway returns RosGateway:
	{RosGateway}
	'RosGateway'
	'{'
		('RosTopicPublisher' '(' RosTopicPublisher+=[ros::Publisher|EString] ( "," RosTopicPublisher+=[ros::Publisher|EString])* ')' )?
		('RosTopicSubscriber' '(' RosTopicSubscriber+=[ros::Subscriber|EString] ( "," RosTopicSubscriber+=[ros::Subscriber|EString])* ')' )?
		('RosServiceServer' '(' RosServiceServer+=[ros::ServiceServer|EString] ( "," RosServiceServer+=[ros::ServiceServer|EString])* ')' )?
		('RosServiceClient' '(' RosServiceClient+=[ros::ServiceClient|EString] ( "," RosServiceClient+=[ros::ServiceClient|EString])* ')' )?
	'}';





Namespace returns ros::Namespace:
	GlobalNamespace | RelativeNamespace_Impl | PrivateNamespace;




Publisher returns ros::Publisher:
	'Publisher'
	'{'
		'name' name=GraphName
		'message' message=[ros::TopicSpec|EString]
		('namespace' namespace=Namespace)?
	'}';

Subscriber returns ros::Subscriber:
	'Subscriber'
	'{'
		'name' name=GraphName
		'message' message=[ros::TopicSpec|EString]
		('namespace' namespace=Namespace)?
	'}';

ServiceServer returns ros::ServiceServer:
	'ServiceServer'
	'{'
		'name' name=GraphName
		'service' service=[ros::ServiceSpec|EString]
		('namespace' namespace=Namespace)?
	'}';

ServiceClient returns ros::ServiceClient:
	'ServiceClient'
	'{'
		'name' name=GraphName
		'service' service=[ros::ServiceSpec|EString]
		('namespace' namespace=Namespace)?
	'}';

GraphName returns ros::GraphName:
	'GraphName' /* TODO: implement this rule and an appropriate IValueConverter */;

TopicSpec returns ros::TopicSpec:
	{ros::TopicSpec}
	'TopicSpec'
	name=EString
	'{'
		('message' message=MessageDefinition)?
	'}';

GlobalNamespace returns ros::GlobalNamespace:
	{ros::GlobalNamespace}
	'GlobalNamespace'
	'{'
		('parts' '{' parts+=GraphName ( "," parts+=GraphName)* '}' )?
	'}';

RelativeNamespace_Impl returns ros::RelativeNamespace:
	{ros::RelativeNamespace}
	'RelativeNamespace'
	'{'
		('parts' '{' parts+=GraphName ( "," parts+=GraphName)* '}' )?
	'}';

PrivateNamespace returns ros::PrivateNamespace:
	{ros::PrivateNamespace}
	'PrivateNamespace'
	'{'
		('parts' '{' parts+=GraphName ( "," parts+=GraphName)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

MessageDefinition returns ros::MessageDefinition:
	{ros::MessageDefinition}
	'MessageDefinition'
	;

ServiceSpec returns ros::ServiceSpec:
	{ros::ServiceSpec}
	'ServiceSpec'
	name=EString
	'{'
		('request' request=MessageDefinition)?
		('response' response=MessageDefinition)?
	'}';
