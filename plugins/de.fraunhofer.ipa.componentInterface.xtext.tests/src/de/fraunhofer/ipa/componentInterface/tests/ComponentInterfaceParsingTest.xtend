/*
 * generated by Xtext 2.17.0
 */
package de.fraunhofer.ipa.componentInterface.tests

import com.google.inject.Inject
import componentInterface.ComponentInterface
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(XtextRunner)
@InjectWith(ComponentInterfaceInjectorProvider)
class ComponentInterfaceParsingTest {
	@Inject
	ParseHelper<ComponentInterface> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			ComponentInterface { name '/turtlesim1/sim' NameSpace '/turtlesim1/' 
			            RosPublishers{
			                RosPublisher '/turtlesim1/pose' { RefPublisher 'turtlesim.turtlesim_node.turtlesim_node.pose'},
			                RosPublisher '/turtlesim1/color_sensor' { RefPublisher 'turtlesim.turtlesim_node.turtlesim_node.color_sensor'}}
			            RosSubscribers{
			                RosSubscriber '/turtlesim1/cmd_vel' { RefSubscriber 'turtlesim.turtlesim_node.turtlesim_node.cmd_vel'}}
			            RosSrvServers{
			                RosServiceServer '/turtlesim1/set_pen' { RefServer 'turtlesim.turtlesim_node.turtlesim_node.set_pen'},
			                RosServiceServer '/turtlesim1/teleport_relative' { RefServer 'turtlesim.turtlesim_node.turtlesim_node.teleport_relative'},
			                RosServiceServer '/turtlesim1/teleport_absolute' { RefServer 'turtlesim.turtlesim_node.turtlesim_node.teleport_absolute'},
			                RosServiceServer '/turtlesim1/clear' { RefServer 'turtlesim.turtlesim_node.turtlesim_node.clear'},
			                RosServiceServer '/turtlesim1/reset' { RefServer 'turtlesim.turtlesim_node.turtlesim_node.reset'},
			                RosServiceServer '/turtlesim1/spawn' { RefServer 'turtlesim.turtlesim_node.turtlesim_node.spawn'},
			                RosServiceServer '/turtlesim1/kill' { RefServer 'turtlesim.turtlesim_node.turtlesim_node.kill'}}
			}
		''')
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
	}
}
