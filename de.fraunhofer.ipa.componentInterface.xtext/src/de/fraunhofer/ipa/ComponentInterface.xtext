// automatically generated by Xtext
grammar de.fraunhofer.ipa.ComponentInterface with org.eclipse.xtext.common.Terminals

import "http://www.example.org/componentInterface" 
import "http://www.example.org/ros" as ros
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ComponentInterface returns ComponentInterface:
	'ComponentInterface'
	'{'
		'name' name=EString
		('namespace' namespace=Namespace)?
		('publisher' RosTopicPublisher+=Publisher)?
		('subscriber' RosTopicSubscriber+=Subscriber)?
		('serviceServer' RosServiceServer+=ServiceServer)?
		('serviceClient' RosServiceClient+=ServiceClient)?
	'}';

Namespace returns ros::Namespace:
	GlobalNamespace | RelativeNamespace_Impl | PrivateNamespace;

GraphName returns ros::GraphName:
	STRING | 'GraphName' /* TODO: implement this rule and an appropriate IValueConverter */;

GlobalNamespace returns ros::GlobalNamespace:
	{ros::GlobalNamespace}
	'GlobalNamespace'
	'{'
		('parts' '{' parts+=GraphName ( "," parts+=GraphName)* '}' )?
	'}';

RelativeNamespace_Impl returns ros::RelativeNamespace:
	{ros::RelativeNamespace}
	'RelativeNamespace'
	'{'
		('parts' '{' parts+=GraphName ( "," parts+=GraphName)* '}' )?
	'}';

PrivateNamespace returns ros::PrivateNamespace:
	{ros::PrivateNamespace}
	'PrivateNamespace'
	'{'
		('parts' '{' parts+=GraphName ( "," parts+=GraphName)* '}' )?
	'}';
	

/* NHG */

//NS returns NS:
//	'NS' /* TODO: implement this rule and an appropriate IValueConverter */;

terminal STRING_SLASH : '^'? ('a'..'z'|'A'..'Z'|'/') ('a'..'z'|'A'..'Z'|'/'|'0'..'9')*;

EString returns ecore::EString:
	STRING | ID | STRING_SLASH;

Publisher returns RosPublisher:
	{RosPublisher}
	'Publisher'
	'{'
		('TopicName' TopicName=EString)?
		('TopicRef' TopicRef=[ros::Publisher|EString])?
		('NameSpace' NameSpace=EString)?
	'}';

Subscriber returns RosSubscriber:
	{RosSubscriber}
	'Subscriber'
	'{'
		('TopicName' TopicName=EString)?
		('TopicRef' TopicRef=[ros::Subscriber|EString])?
		('NameSpace' NameSpace=EString)?
	'}';

ServiceServer returns RosServiceServer:
	{RosServiceServer}
	'ServiceServer'
	'{'
		('ServiceName' ServiceName=EString)?
		('SrvRef' SrvRef=[ros::ServiceServer|EString])?
		('NameSpace' NameSpace=EString)?
	'}';

ServiceClient returns RosServiceClient:
	{RosServiceClient}
	'ServiceServer'
	'{'
		('ServiceName' ServiceName=EString)?
		('SrvRef' SrvRef=[ros::ServiceClient|EString])?
		('NameSpace' NameSpace=EString)?
	'}';
	
