/**
 * generated by Xtext 2.12.0
 */
package de.fraunhofer.ipa.ros.formatting2;

import com.google.inject.Inject;
import de.fraunhofer.ipa.ros.services.RosArtifactGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import ros.ActionClient;
import ros.ActionServer;
import ros.Artifact;
import ros.Node;
import ros.Parameter;
import ros.Publisher;
import ros.ServiceClient;
import ros.ServiceServer;
import ros.Subscriber;

@SuppressWarnings("all")
public class RosArtifactFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private RosArtifactGrammarAccess _rosArtifactGrammarAccess;
  
  protected void _format(final Artifact artifact, @Extension final IFormattableDocument document) {
    document.<Node>format(artifact.getNode());
  }
  
  protected void _format(final Node node, @Extension final IFormattableDocument document) {
    EList<ServiceServer> _serviceserver = node.getServiceserver();
    for (final ServiceServer serviceServer : _serviceserver) {
      document.<ServiceServer>format(serviceServer);
    }
    EList<Publisher> _publisher = node.getPublisher();
    for (final Publisher publisher : _publisher) {
      document.<Publisher>format(publisher);
    }
    EList<Subscriber> _subscriber = node.getSubscriber();
    for (final Subscriber subscriber : _subscriber) {
      document.<Subscriber>format(subscriber);
    }
    EList<ServiceClient> _serviceclient = node.getServiceclient();
    for (final ServiceClient serviceClient : _serviceclient) {
      document.<ServiceClient>format(serviceClient);
    }
    EList<ActionServer> _actionserver = node.getActionserver();
    for (final ActionServer actionServer : _actionserver) {
      document.<ActionServer>format(actionServer);
    }
    EList<ActionClient> _actionclient = node.getActionclient();
    for (final ActionClient actionClient : _actionclient) {
      document.<ActionClient>format(actionClient);
    }
    EList<Parameter> _parameter = node.getParameter();
    for (final Parameter parameter : _parameter) {
      document.<Parameter>format(parameter);
    }
  }
  
  public void format(final Object artifact, final IFormattableDocument document) {
    if (artifact instanceof XtextResource) {
      _format((XtextResource)artifact, document);
      return;
    } else if (artifact instanceof Artifact) {
      _format((Artifact)artifact, document);
      return;
    } else if (artifact instanceof Node) {
      _format((Node)artifact, document);
      return;
    } else if (artifact instanceof EObject) {
      _format((EObject)artifact, document);
      return;
    } else if (artifact == null) {
      _format((Void)null, document);
      return;
    } else if (artifact != null) {
      _format(artifact, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(artifact, document).toString());
    }
  }
}
