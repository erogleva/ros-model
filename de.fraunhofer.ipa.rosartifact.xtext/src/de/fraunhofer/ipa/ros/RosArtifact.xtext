// automatically generated by Xtext
grammar de.fraunhofer.ipa.ros.RosArtifact with org.eclipse.xtext.common.Terminals

import "http://www.example.org/ros" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2003/XMLType" as type

Artifact returns Artifact:
	{Artifact}
	'Artifact'
	name=EString
	'{'
		('node' node=Node)?
	'}';

Namespace returns Namespace:
	GlobalNamespace | RelativeNamespace_Impl | PrivateNamespace;


ParameterType returns ParameterType:
	ParameterListType | ParameterStructType | ParameterIntegerType | ParameterStringType | ParameterDoubleType | ParameterDateType | ParameterBooleanType | ParameterBase64Type | ParameterAnyType | ParameterArrayType;


ParameterValue returns ParameterValue:
	ParameterAny | ParameterString | ParameterBase64 | ParameterInteger | ParameterDouble | ParameterBoolean | ParameterSequence | ParameterStruct | ParameterDate;


EString returns ecore::EString:
	STRING | ID;

Node returns Node:
	'Node'
	'{'
		'name' name=EString
		('serviceserver' '{' serviceserver+=ServiceServer ( "," serviceserver+=ServiceServer)* '}' )?
		('publisher' '{' publisher+=Publisher ( "," publisher+=Publisher)* '}' )?
		('subscriber' '{' subscriber+=Subscriber ( "," subscriber+=Subscriber)* '}' )?
		('serviceclient' '{' serviceclient+=ServiceClient ( "," serviceclient+=ServiceClient)* '}' )?
		('actionserver' '{' actionserver+=ActionServer ( "," actionserver+=ActionServer)* '}' )?
		('actionclient' '{' actionclient+=ActionClient ( "," actionclient+=ActionClient)* '}' )?
		('parameter' '{' parameter+=Parameter ( "," parameter+=Parameter)* '}' )?
	'}';

ServiceServer returns ServiceServer:
	'ServiceServer'
	'{'
		('name' name=EString)?
		'service' service=[ServiceSpec|EString]
		('namespace' namespace=Namespace)?
	'}';

Publisher returns Publisher:
	'Publisher'
	'{'
		('name' name=EString)?
		'message' message=[TopicSpec|EString]
		('namespace' namespace=Namespace)?
	'}';

Subscriber returns Subscriber:
	'Subscriber'
	'{'
		('name' name=EString)?
		'message' message=[TopicSpec|EString]
		('namespace' namespace=Namespace)?
	'}';

ServiceClient returns ServiceClient:
	'ServiceClient'
	'{'
		('name' name=EString)?
		'service' service=[ServiceSpec|EString]
		('namespace' namespace=Namespace)?
	'}';

ActionServer returns ActionServer:
	'ActionServer'
	'{'
		('name' name=EString)?
		'action' action=[ActionSpec|EString]
		('namespace' namespace=Namespace)?
	'}';

ActionClient returns ActionClient:
	'ActionClient'
	'{'
		('name' name=EString)?
		'action' action=[ActionSpec|EString]
		('namespace' namespace=Namespace)?
	'}';

GraphName returns GraphName:
	'GraphName' /* TODO: implement this rule and an appropriate IValueConverter */;

Parameter returns Parameter:
	'Parameter'
	'{'
		('name' name=EString)?
		('namespace' namespace=Namespace)?
		'type' type=ParameterType
	'}';

GlobalNamespace returns GlobalNamespace:
	{GlobalNamespace}
	'GlobalNamespace'
	'{'
		('parts' '{' parts+=GraphName ( "," parts+=GraphName)* '}' )?
	'}';

RelativeNamespace_Impl returns RelativeNamespace:
	{RelativeNamespace}
	'RelativeNamespace'
	'{'
		('parts' '{' parts+=GraphName ( "," parts+=GraphName)* '}' )?
	'}';

PrivateNamespace returns PrivateNamespace:
	{PrivateNamespace}
	'PrivateNamespace'
	'{'
		('parts' '{' parts+=GraphName ( "," parts+=GraphName)* '}' )?
	'}';

ParameterListType returns ParameterListType:
	{ParameterListType}
	'ParameterListType'
	'{'
		('sequence' '{' sequence+=ParameterType ( "," sequence+=ParameterType)* '}' )?
		('default' default=ParameterSequence)?
	'}';

ParameterStructType returns ParameterStructType:
	{ParameterStructType}
	'ParameterStructType'
	'{'
		('parameterstructypetmember' '{' parameterstructypetmember+=ParameterStructTypeMember ( "," parameterstructypetmember+=ParameterStructTypeMember)* '}' )?
	'}';

ParameterIntegerType returns ParameterIntegerType:
	{ParameterIntegerType}
	'ParameterIntegerType'
	'{'
		('default' default=ParameterInteger)?
	'}';

ParameterStringType returns ParameterStringType:
	{ParameterStringType}
	'ParameterStringType'
	'{'
		('default' default=ParameterString)?
	'}';

ParameterDoubleType returns ParameterDoubleType:
	{ParameterDoubleType}
	'ParameterDoubleType'
	'{'
		('default' default=ParameterDouble)?
	'}';

ParameterDateType returns ParameterDateType:
	{ParameterDateType}
	'ParameterDateType'
	'{'
		('default' default=ParameterDate)?
	'}';

ParameterBooleanType returns ParameterBooleanType:
	{ParameterBooleanType}
	'ParameterBooleanType'
	'{'
		('default' default=ParameterBoolean)?
	'}';

ParameterBase64Type returns ParameterBase64Type:
	{ParameterBase64Type}
	'ParameterBase64Type'
	'{'
		('default' default=ParameterBase64)?
	'}';

ParameterAnyType returns ParameterAnyType:
	{ParameterAnyType}
	'ParameterAnyType'
	'{'
		('default' default=ParameterAny)?
	'}';

ParameterArrayType returns ParameterArrayType:
	'ParameterArrayType'
	'{'
		'type' type=ParameterType
		('default' default=ParameterSequence)?
	'}';

ParameterSequence returns ParameterSequence:
	{ParameterSequence}
	'ParameterSequence'
	'{'
		('value' '{' value+=ParameterValue ( "," value+=ParameterValue)* '}' )?
	'}';

ParameterAny returns ParameterAny:
	{ParameterAny}
	'ParameterAny'
	'{'
		('value' value=EString)?
	'}';

ParameterString returns ParameterString:
	'ParameterString'
	'{'
		'value' value=EString
	'}';

ParameterBase64 returns ParameterBase64:
	'ParameterBase64'
	'{'
		'value' value=Base64Binary
	'}';

ParameterInteger returns ParameterInteger:
	'ParameterInteger'
	'{'
		'value' value=Int0
	'}';

ParameterDouble returns ParameterDouble:
	'ParameterDouble'
	'{'
		'value' value=Double
	'}';

ParameterBoolean returns ParameterBoolean:
	'ParameterBoolean'
	'{'
		'value' value=Boolean
	'}';

ParameterStruct returns ParameterStruct:
	{ParameterStruct}
	'ParameterStruct'
	'{'
		('value' '{' value+=ParameterStructMember ( "," value+=ParameterStructMember)* '}' )?
	'}';

ParameterDate returns ParameterDate:
	'ParameterDate'
	'{'
		'value' value=DateTime
	'}';

Base64Binary returns type::Base64Binary:
	'Base64Binary' /* TODO: implement this rule and an appropriate IValueConverter */;

Int0 returns type::Int:
	'Int' /* TODO: implement this rule and an appropriate IValueConverter */;

Double returns type::Double:
	'Double' /* TODO: implement this rule and an appropriate IValueConverter */;

Boolean returns type::Boolean:
	'Boolean' /* TODO: implement this rule and an appropriate IValueConverter */;

ParameterStructMember returns ParameterStructMember:
	'ParameterStructMember'
	name=EString
	'{'
		'value' value=ParameterValue
	'}';

DateTime returns type::DateTime:
	'DateTime' /* TODO: implement this rule and an appropriate IValueConverter */;

ParameterStructTypeMember returns ParameterStructTypeMember:
	'ParameterStructTypeMember'
	name=EString
	'{'
		'type' type=ParameterType
		('default' default=ParameterStruct)?
	'}';
